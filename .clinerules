# Правила разработки проекта Avalon

## Общие правила

- Проект является монорепозиторием с тремя основными пакетами: `backend`, `ui` и `types`
- Используйте TypeScript для всей разработки
- Следуйте настройкам ESLint и Prettier, определенным в конфигурационных файлах проекта
- Соблюдайте структуру проекта и архитектурные решения, принятые в каждом пакете
- Все новые функции должны быть типизированы в пакете `types` и доступны для использования как в бэкенде, так и во фронтенде

## Структура проекта

- `/packages/backend` - серверная часть приложения (Node.js, Express, Socket.io, MongoDB)
- `/packages/ui` - клиентская часть приложения (Vue 3, Vuetify, Vuex)
- `/packages/types` - общие типы и интерфейсы для обоих частей приложения

## Правила для бэкенда

- Используйте архитектуру, основанную на менеджерах и классах
- Все взаимодействия с базой данных должны происходить через `DBManager`
- Все взаимодействия с сокетами должны быть обработаны с помощью `handleSocketErrors`
- Используйте `eventBus` для коммуникации между различными частями приложения
- Соблюдайте структуру директорий:
  - `/src/core` - основная логика игры
  - `/src/db` - взаимодействие с базой данных
  - `/src/helpers` - вспомогательные функции
  - `/src/main` - основной менеджер приложения
  - `/src/room` - логика комнат
  - `/src/user` - логика пользователей

## Правила для фронтенда

- Используйте Vue 3 Composition API для новых компонентов
- Используйте Vuex для управления состоянием приложения
- Используйте Vue Router для навигации
- Используйте i18n для интернационализации
- Используйте Vuetify для UI компонентов
- Разбивайте сложные методы на более мелкие функции с понятными именами
- Выделяйте логику проверки условий в отдельные функции
- Добавляйте комментарии к сложным участкам кода
- Соблюдайте структуру директорий:
  - `/src/components` - переиспользуемые компоненты
  - `/src/pages` - страницы приложения
  - `/src/store` - хранилище Vuex
  - `/src/router` - маршрутизация
  - `/src/helpers` - вспомогательные функции
  - `/src/assets` - статические ресурсы
  - `/src/i18n` - локализация

## Правила для типов

- Все типы должны быть экспортированы из соответствующих файлов
- Используйте префикс `T` для типов (например, `TRoomInfo`)
- Используйте интерфейсы для описания объектов с методами
- Организуйте типы по функциональным областям:
  - `/game` - типы, связанные с игрой
  - `/room` - типы, связанные с комнатами
  - `/user` - типы, связанные с пользователями
  - `/api` - типы, связанные с API

## Правила для тестирования

- Пишите тесты для новой функциональности
- Используйте Jest для тестирования
- Тесты должны быть размещены рядом с тестируемым кодом в директории `test`

## Правила для документации

- Документируйте публичные API и интерфейсы
- Используйте JSDoc для документирования функций и классов
- Обновляйте README.md при добавлении новых функций или изменении существующих

## Правила для Docker

- Используйте Docker для разработки и деплоя
- Следуйте инструкциям в docker-compose.dev.yml для локальной разработки
- Используйте отдельные Dockerfile для бэкенда и фронтенда

## Специфические правила для игры Avalon

- Все новые роли должны наследоваться от абстрактных классов в `/packages/backend/src/core/roles/abstract.ts`
- Все дополнения к игре должны быть реализованы в `/packages/backend/src/core/game/addons/`
- Все изменения в логике игры должны быть отражены в истории игры
- Все новые состояния игры должны быть типизированы в `/packages/types/game/state.ts`
- При добавлении новых методов API для аддонов:
  1. Добавьте новый тип параметров в `TGameMethodsParams` в файле `/packages/backend/src/core/game-manager/interface.ts`
  2. Добавьте обработку нового метода в метод `callGameMethods` в файле `/packages/backend/src/core/game-manager/index.ts`
  3. Добавьте новый обработчик сокета в метод `createMethodsForGame` в файле `/packages/backend/src/main/index.ts`
  4. Добавьте новый метод в интерфейс `ClientToServerEvents` в файле `/packages/types/api/sockets.ts`
